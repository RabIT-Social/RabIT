// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    private   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById Int
    comments    Comment[]
    reactions   Reaction[]
    media       Media[]
    createdBy   Profile    @relation(fields: [createdById], references: [id])

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Profile       Profile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Subscription {
    id           Int     @id @default(autoincrement())
    subscriberId Int
    subscriber   Profile @relation(name: "Subscribers", fields: [subscriberId], references: [id])
    creatorId    Int
    creator      Profile @relation(name: "Subscriptions", fields: [creatorId], references: [id])

    @@index([subscriberId, creatorId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    postId Int
    post   Post @relation(fields: [postId], references: [id])

    createdById Int
    createdBy   Profile @relation(fields: [createdById], references: [id])

    @@index([postId, createdById])
}

model Reaction {
    id           String  @id @default(cuid())
    reactionType String
    postId       Int
    post         Post    @relation(fields: [postId], references: [id])
    creatorId    Int
    creator      Profile @relation(fields: [creatorId], references: [id])

    @@index([postId, creatorId])
}

model Media {
    id        Int      @id @default(autoincrement())
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    postId  Int
    post    Post      @relation(fields: [postId], references: [id])
    Profile Profile[]
}

model Profile {
    id               Int      @id @default(autoincrement())
    bio              String?
    subscriptionCost Int      @default(0)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id])

    mediaId      Int?
    profileImage Media? @relation(fields: [mediaId], references: [id])

    comments      Comment[]
    subscribers   Subscription[] @relation(name: "Subscribers")
    subscriptions Subscription[] @relation(name: "Subscriptions")
    reactions     Reaction[]
    posts         Post[]
}
